// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from '@hey-api/client-axios';
import type {
  AppControllerGetHelloData,
  AppControllerGetHelloResponse,
  AppControllerLoginData,
  AppControllerLoginResponse,
  AppControllerRefreshData,
  AppControllerRefreshResponse,
  AppControllerRegisterData,
  AppControllerRegisterResponse,
  AppControllerLogoutData,
  EmployeesControllerFindAllData,
  EmployeesControllerFindAllResponse,
  EmployeesControllerCreateData,
  EmployeesControllerCreateResponse,
  EmployeesControllerFindMeData,
  EmployeesControllerFindMeResponse,
  EmployeesControllerRemoveData,
  EmployeesControllerFindOneData,
  EmployeesControllerFindOneResponse,
  EmployeesControllerUpdateData,
  EmployeesControllerUpdateResponse,
  PositionsControllerFindAllData,
  PositionsControllerFindAllResponse,
  PositionsControllerCreateData,
  PositionsControllerCreateResponse,
  PositionsControllerFindAllInDepartmentData,
  PositionsControllerFindAllInDepartmentResponse,
  PositionsControllerFindAllInDepartmentNameData,
  PositionsControllerFindAllInDepartmentNameResponse,
  PositionsControllerRemoveData,
  PositionsControllerFindOneData,
  PositionsControllerFindOneResponse,
  PositionsControllerUpdateData,
  PositionsControllerUpdateResponse,
  PositionsControllerFindOneByNameInDepartmentData,
  PositionsControllerFindOneByNameInDepartmentResponse,
  AssignedGroupControllerUpdateAssignedGroupSignerData,
  AssignedGroupControllerUpdateAssignedGroupSignerResponse,
  FormTemplatesControllerFindAllData,
  FormTemplatesControllerFindAllResponse,
  FormTemplatesControllerCreateData,
  FormTemplatesControllerCreateResponse,
  FormTemplatesControllerRemoveData,
  FormTemplatesControllerFindOneData,
  FormTemplatesControllerFindOneResponse,
  FormTemplatesControllerUpdateData,
  FormTemplatesControllerUpdateResponse,
  DepartmentsControllerFindAllData,
  DepartmentsControllerFindAllResponse,
  DepartmentsControllerCreateData,
  DepartmentsControllerCreateResponse,
  DepartmentsControllerRemoveData,
  DepartmentsControllerFindOneData,
  DepartmentsControllerFindOneResponse,
  DepartmentsControllerUpdateData,
  DepartmentsControllerUpdateResponse,
  DepartmentsControllerFindOneByNameData,
  DepartmentsControllerFindOneByNameResponse,
  FormInstancesControllerFindAllData,
  FormInstancesControllerFindAllResponse,
  FormInstancesControllerCreateData,
  FormInstancesControllerCreateResponse,
  FormInstancesControllerFindAllAssignedToCurrentEmployeeData,
  FormInstancesControllerFindAllAssignedToCurrentEmployeeResponse,
  FormInstancesControllerFindAllCreatedByCurrentEmployeeData,
  FormInstancesControllerFindAllCreatedByCurrentEmployeeResponse,
  FormInstancesControllerRemoveData,
  FormInstancesControllerFindOneData,
  FormInstancesControllerFindOneResponse,
  FormInstancesControllerUpdateData,
  FormInstancesControllerUpdateResponse,
  FormInstancesControllerSignFormInstanceData,
  FormInstancesControllerSignFormInstanceResponse,
  FormInstancesControllerCompleteFormInstanceData,
  FormInstancesControllerCompleteFormInstanceResponse,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
};

export const appControllerGetHello = <ThrowOnError extends boolean = false>(
  options?: Options<AppControllerGetHelloData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AppControllerGetHelloResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api',
    ...options,
  });
};

export const appControllerLogin = <ThrowOnError extends boolean = false>(
  options: Options<AppControllerLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AppControllerLoginResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const appControllerRefresh = <ThrowOnError extends boolean = false>(
  options?: Options<AppControllerRefreshData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AppControllerRefreshResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auth/refresh',
    ...options,
  });
};

export const appControllerRegister = <ThrowOnError extends boolean = false>(
  options: Options<AppControllerRegisterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AppControllerRegisterResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/auth/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const appControllerLogout = <ThrowOnError extends boolean = false>(
  options?: Options<AppControllerLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/api/auth/logout',
      ...options,
    },
  );
};

export const employeesControllerFindAll = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<EmployeesControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EmployeesControllerFindAllResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/employees',
    ...options,
  });
};

export const employeesControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<EmployeesControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    EmployeesControllerCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/employees',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const employeesControllerFindMe = <ThrowOnError extends boolean = false>(
  options?: Options<EmployeesControllerFindMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    EmployeesControllerFindMeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/employees/me',
    ...options,
  });
};

export const employeesControllerRemove = <ThrowOnError extends boolean = false>(
  options: Options<EmployeesControllerRemoveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/api/employees/{id}',
    ...options,
  });
};

export const employeesControllerFindOne = <
  ThrowOnError extends boolean = false,
>(
  options: Options<EmployeesControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    EmployeesControllerFindOneResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/employees/{id}',
    ...options,
  });
};

export const employeesControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<EmployeesControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    EmployeesControllerUpdateResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/employees/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const positionsControllerFindAll = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<PositionsControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    PositionsControllerFindAllResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/positions',
    ...options,
  });
};

export const positionsControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<PositionsControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PositionsControllerCreateResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/positions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const positionsControllerFindAllInDepartment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PositionsControllerFindAllInDepartmentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    PositionsControllerFindAllInDepartmentResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/positions/department/{departmentId}',
    ...options,
  });
};

export const positionsControllerFindAllInDepartmentName = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    PositionsControllerFindAllInDepartmentNameData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    PositionsControllerFindAllInDepartmentNameResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/positions/departmentName/{departmentName}',
    ...options,
  });
};

export const positionsControllerRemove = <ThrowOnError extends boolean = false>(
  options: Options<PositionsControllerRemoveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/api/positions/{id}',
    ...options,
  });
};

export const positionsControllerFindOne = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PositionsControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    PositionsControllerFindOneResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/positions/{id}',
    ...options,
  });
};

export const positionsControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PositionsControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PositionsControllerUpdateResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/positions/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const positionsControllerFindOneByNameInDepartment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    PositionsControllerFindOneByNameInDepartmentData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    PositionsControllerFindOneByNameInDepartmentResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/positions/name/{name}',
    ...options,
  });
};

export const assignedGroupControllerUpdateAssignedGroupSigner = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    AssignedGroupControllerUpdateAssignedGroupSignerData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).patch<
    AssignedGroupControllerUpdateAssignedGroupSignerResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/signatures/{id}/signer',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const formTemplatesControllerFindAll = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<FormTemplatesControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    FormTemplatesControllerFindAllResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/form-templates',
    ...options,
  });
};

export const formTemplatesControllerCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<FormTemplatesControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    FormTemplatesControllerCreateResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    url: '/api/form-templates',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

export const formTemplatesControllerRemove = <
  ThrowOnError extends boolean = false,
>(
  options: Options<FormTemplatesControllerRemoveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/api/form-templates/{id}',
    ...options,
  });
};

export const formTemplatesControllerFindOne = <
  ThrowOnError extends boolean = false,
>(
  options: Options<FormTemplatesControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    FormTemplatesControllerFindOneResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/form-templates/{id}',
    ...options,
  });
};

export const formTemplatesControllerUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<FormTemplatesControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    FormTemplatesControllerUpdateResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/form-templates/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const departmentsControllerFindAll = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DepartmentsControllerFindAllData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    DepartmentsControllerFindAllResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/departments',
    ...options,
  });
};

export const departmentsControllerCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DepartmentsControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DepartmentsControllerCreateResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/departments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const departmentsControllerRemove = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DepartmentsControllerRemoveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/api/departments/{id}',
    ...options,
  });
};

export const departmentsControllerFindOne = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DepartmentsControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    DepartmentsControllerFindOneResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/departments/{id}',
    ...options,
  });
};

export const departmentsControllerUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DepartmentsControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    DepartmentsControllerUpdateResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/departments/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const departmentsControllerFindOneByName = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DepartmentsControllerFindOneByNameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    DepartmentsControllerFindOneByNameResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/departments/name/{name}',
    ...options,
  });
};

export const formInstancesControllerFindAll = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<FormInstancesControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    FormInstancesControllerFindAllResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/form-instances',
    ...options,
  });
};

export const formInstancesControllerCreate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<FormInstancesControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    FormInstancesControllerCreateResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/form-instances',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const formInstancesControllerFindAllAssignedToCurrentEmployee = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    FormInstancesControllerFindAllAssignedToCurrentEmployeeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    FormInstancesControllerFindAllAssignedToCurrentEmployeeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/form-instances/me',
    ...options,
  });
};

export const formInstancesControllerFindAllCreatedByCurrentEmployee = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    FormInstancesControllerFindAllCreatedByCurrentEmployeeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    FormInstancesControllerFindAllCreatedByCurrentEmployeeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/form-instances/created/me',
    ...options,
  });
};

export const formInstancesControllerRemove = <
  ThrowOnError extends boolean = false,
>(
  options: Options<FormInstancesControllerRemoveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/api/form-instances/{id}',
    ...options,
  });
};

export const formInstancesControllerFindOne = <
  ThrowOnError extends boolean = false,
>(
  options: Options<FormInstancesControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    FormInstancesControllerFindOneResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/form-instances/{id}',
    ...options,
  });
};

export const formInstancesControllerUpdate = <
  ThrowOnError extends boolean = false,
>(
  options: Options<FormInstancesControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    FormInstancesControllerUpdateResponse,
    unknown,
    ThrowOnError
  >({
    url: '/api/form-instances/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const formInstancesControllerSignFormInstance = <
  ThrowOnError extends boolean = false,
>(
  options: Options<FormInstancesControllerSignFormInstanceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    FormInstancesControllerSignFormInstanceResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    url: '/api/form-instances/{formInstanceId}/sign/{signatureId}',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

export const formInstancesControllerCompleteFormInstance = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    FormInstancesControllerCompleteFormInstanceData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).patch<
    FormInstancesControllerCompleteFormInstanceResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/form-instances/{formInstanceId}/complete',
    ...options,
  });
};
