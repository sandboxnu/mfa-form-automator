// This file is auto-generated by @hey-api/openapi-ts

export const JwtEntitySchema = {
  type: 'object',
  properties: {
    accessToken: {
      type: 'string',
    },
  },
  required: ['accessToken'],
} as const;

export const RegisterEmployeeDtoSchema = {
  type: 'object',
  properties: {
    firstName: {
      type: 'string',
    },
    lastName: {
      type: 'string',
    },
    email: {
      type: 'string',
      format: 'email',
    },
    password: {
      type: 'string',
      minLength: 5,
    },
    accessToken: {
      type: 'string',
    },
  },
  required: ['firstName', 'lastName', 'email', 'password', 'accessToken'],
} as const;

export const DepartmentBaseEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
  },
  required: ['id', 'name'],
} as const;

export const PositionBaseEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    department: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/DepartmentBaseEntity',
        },
      ],
    },
  },
  required: ['id', 'name', 'department'],
} as const;

export const EmployeeSecureEntityHydratedSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    firstName: {
      type: 'string',
    },
    lastName: {
      type: 'string',
    },
    email: {
      type: 'string',
    },
    signatureLink: {
      type: 'string',
      nullable: true,
    },
    scope: {
      type: 'string',
      enum: ['BASE_USER', 'CONTRIBUTOR', 'ADMIN'],
    },
    isActive: {
      type: 'boolean',
    },
    position: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/PositionBaseEntity',
        },
      ],
    },
    positionId: {
      type: 'string',
      nullable: true,
    },
    pswdHash: {
      type: 'string',
      nullable: true,
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
    refreshToken: {
      type: 'string',
      nullable: true,
    },
  },
  required: [
    'id',
    'firstName',
    'lastName',
    'email',
    'signatureLink',
    'scope',
    'isActive',
    'position',
    'positionId',
    'pswdHash',
    'createdAt',
    'updatedAt',
    'refreshToken',
  ],
} as const;

export const CreateEmployeeDtoSchema = {
  type: 'object',
  properties: {
    firstName: {
      type: 'string',
    },
    lastName: {
      type: 'string',
    },
    positionId: {
      type: 'string',
      nullable: true,
      format: 'uuid',
    },
    email: {
      type: 'string',
      format: 'email',
    },
    scope: {
      type: 'string',
      enum: ['BASE_USER', 'CONTRIBUTOR', 'ADMIN'],
    },
    accessToken: {
      type: 'string',
    },
  },
  required: ['firstName', 'lastName', 'email', 'scope', 'accessToken'],
} as const;

export const OnboardEmployeeDtoSchema = {
  type: 'object',
  properties: {
    signatureLink: {
      type: 'string',
    },
    positionId: {
      type: 'string',
    },
  },
  required: ['signatureLink', 'positionId'],
} as const;

export const EmployeeBaseEntityResponseSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    firstName: {
      type: 'string',
    },
    lastName: {
      type: 'string',
    },
    email: {
      type: 'string',
    },
    signatureLink: {
      type: 'string',
    },
    scope: {
      type: 'string',
      enum: ['BASE_USER', 'CONTRIBUTOR', 'ADMIN'],
    },
    position: {
      nullable: true,
      description: 'Position of the employee, null if not assigned',
      allOf: [
        {
          $ref: '#/components/schemas/PositionBaseEntity',
        },
      ],
    },
  },
  required: ['id', 'firstName', 'lastName', 'email'],
} as const;

export const EmployeesFindAllResponseSchema = {
  type: 'object',
  properties: {
    count: {
      type: 'number',
    },
    employees: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/EmployeeBaseEntityResponse',
      },
    },
  },
  required: ['count', 'employees'],
} as const;

export const EmployeeBaseEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    firstName: {
      type: 'string',
    },
    lastName: {
      type: 'string',
    },
    email: {
      type: 'string',
    },
    isActive: {
      type: 'boolean',
    },
  },
  required: ['id', 'firstName', 'lastName', 'email', 'isActive'],
} as const;

export const UpdateEmployeeDtoSchema = {
  type: 'object',
  properties: {
    firstName: {
      type: 'string',
    },
    lastName: {
      type: 'string',
    },
    positionId: {
      type: 'string',
      nullable: true,
      format: 'uuid',
    },
    scope: {
      type: 'string',
      enum: ['BASE_USER', 'CONTRIBUTOR', 'ADMIN'],
    },
    accessToken: {
      type: 'string',
    },
    signatureLink: {
      type: 'string',
    },
    isActive: {
      type: 'boolean',
    },
  },
} as const;

export const CreatePositionDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    departmentId: {
      type: 'string',
      nullable: true,
      format: 'uuid',
    },
  },
  required: ['name'],
} as const;

export const PositionEntityEmployeeHydratedSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    department: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/DepartmentBaseEntity',
        },
      ],
    },
    employees: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/EmployeeBaseEntity',
      },
    },
  },
  required: ['id', 'name', 'department', 'employees'],
} as const;

export const UpdatePositionDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    departmentId: {
      type: 'string',
      nullable: true,
      format: 'uuid',
    },
  },
} as const;

export const ConnectEmployeeDtoSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
  },
  required: ['id'],
} as const;

export const UpdateAssignedGroupSignerDtoSchema = {
  type: 'object',
  properties: {
    fieldGroupId: {
      type: 'string',
    },
    signerType: {
      type: 'string',
      enum: ['POSITION', 'DEPARTMENT', 'USER', 'USER_LIST'],
    },
    signerEmployeeId: {
      type: 'string',
    },
    signerPositionId: {
      type: 'string',
    },
    signerDepartmentId: {
      type: 'string',
    },
    signerEmployeeList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ConnectEmployeeDto',
      },
    },
  },
} as const;

export const CreateTemplateBoxDtoSchema = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      enum: ['SIGNATURE', 'CHECKBOX', 'TEXT_FIELD'],
    },
    x_coordinate: {
      type: 'number',
    },
    y_coordinate: {
      type: 'number',
    },
    width: {
      type: 'number',
    },
    height: {
      type: 'number',
    },
    page: {
      type: 'number',
    },
  },
  required: ['type', 'x_coordinate', 'y_coordinate', 'width', 'height', 'page'],
} as const;

export const CreateFieldGroupDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    order: {
      type: 'number',
    },
    templateBoxes: {
      minItems: 1,
      type: 'array',
      items: {
        $ref: '#/components/schemas/CreateTemplateBoxDto',
      },
    },
  },
  required: ['name', 'order', 'templateBoxes'],
} as const;

export const CreateFormTemplateDtoSchema = {
  type: 'object',
  properties: {
    file: {
      type: 'string',
      format: 'binary',
    },
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    pageWidth: {
      type: 'number',
    },
    pageHeight: {
      type: 'number',
    },
    fieldGroups: {
      minItems: 1,
      type: 'array',
      items: {
        $ref: '#/components/schemas/CreateFieldGroupDto',
      },
    },
    disabled: {
      type: 'boolean',
    },
  },
  required: [
    'file',
    'name',
    'description',
    'pageWidth',
    'pageHeight',
    'fieldGroups',
    'disabled',
  ],
} as const;

export const TemplateBoxBaseEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    type: {
      type: 'string',
      enum: ['SIGNATURE', 'CHECKBOX', 'TEXT_FIELD'],
    },
    x_coordinate: {
      type: 'number',
    },
    y_coordinate: {
      type: 'number',
    },
    width: {
      type: 'number',
    },
    height: {
      type: 'number',
    },
    page: {
      type: 'number',
    },
  },
  required: [
    'id',
    'type',
    'x_coordinate',
    'y_coordinate',
    'width',
    'height',
    'page',
  ],
} as const;

export const FieldGroupBaseEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    order: {
      type: 'number',
    },
    templateBoxes: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/TemplateBoxBaseEntity',
      },
    },
  },
  required: ['id', 'name', 'order', 'templateBoxes'],
} as const;

export const FormTemplateEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    pageWidth: {
      type: 'number',
    },
    pageHeight: {
      type: 'number',
    },
    formDocLink: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    disabled: {
      type: 'boolean',
    },
    fieldGroups: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FieldGroupBaseEntity',
      },
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: [
    'id',
    'name',
    'pageWidth',
    'pageHeight',
    'formDocLink',
    'description',
    'disabled',
    'fieldGroups',
    'createdAt',
    'updatedAt',
  ],
} as const;

export const FormTemplateFindAllResponseSchema = {
  type: 'object',
  properties: {
    count: {
      type: 'number',
    },
    formTemplates: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FormTemplateEntity',
      },
    },
  },
  required: ['count', 'formTemplates'],
} as const;

export const UpdateFormTemplateDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    pageWidth: {
      type: 'number',
    },
    fieldGroups: {
      minItems: 1,
      type: 'array',
      items: {
        $ref: '#/components/schemas/CreateFieldGroupDto',
      },
    },
    disabled: {
      type: 'boolean',
    },
  },
} as const;

export const CreateDepartmentDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
  },
  required: ['name'],
} as const;

export const DepartmentEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: ['id', 'name', 'createdAt', 'updatedAt'],
} as const;

export const PositionEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    departmentId: {
      type: 'string',
      nullable: true,
    },
  },
  required: ['id', 'name', 'departmentId'],
} as const;

export const DepartmentEntityHydratedSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    positions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PositionEntity',
      },
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: ['id', 'name', 'positions', 'createdAt', 'updatedAt'],
} as const;

export const UpdateDepartmentDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
  },
} as const;

export const CreateAssignedGroupDtoSchema = {
  type: 'object',
  properties: {
    order: {
      type: 'number',
    },
    fieldGroupId: {
      type: 'string',
    },
    signerType: {
      type: 'string',
      enum: ['POSITION', 'DEPARTMENT', 'USER', 'USER_LIST'],
    },
    signerEmployeeId: {
      type: 'string',
    },
    signerPositionId: {
      type: 'string',
    },
    signerDepartmentId: {
      type: 'string',
    },
    signerEmployeeList: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ConnectEmployeeDto',
      },
    },
  },
  required: ['order', 'fieldGroupId', 'signerType', 'signerEmployeeList'],
} as const;

export const CreateFormInstanceDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    assignedGroups: {
      minItems: 1,
      type: 'array',
      items: {
        $ref: '#/components/schemas/CreateAssignedGroupDto',
      },
    },
    originatorId: {
      type: 'string',
    },
    formTemplateId: {
      type: 'string',
    },
    formDocLink: {
      type: 'string',
    },
  },
  required: [
    'name',
    'description',
    'assignedGroups',
    'originatorId',
    'formTemplateId',
    'formDocLink',
  ],
} as const;

export const FormTemplateBaseEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    pageWidth: {
      type: 'number',
    },
    pageHeight: {
      type: 'number',
    },
    formDocLink: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    disabled: {
      type: 'boolean',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  required: [
    'id',
    'name',
    'pageWidth',
    'pageHeight',
    'formDocLink',
    'description',
    'disabled',
    'createdAt',
    'updatedAt',
  ],
} as const;

export const AssignedGroupEntityHydratedSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    fieldGroup: {
      $ref: '#/components/schemas/FieldGroupBaseEntity',
    },
    order: {
      type: 'number',
    },
    signed: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    signedDocLink: {
      type: 'string',
      nullable: true,
    },
    signerType: {
      type: 'string',
      enum: ['POSITION', 'DEPARTMENT', 'USER', 'USER_LIST'],
    },
    signingEmployee: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/EmployeeBaseEntity',
        },
      ],
    },
    signerPosition: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/PositionBaseEntity',
        },
      ],
    },
    signerDepartment: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/DepartmentBaseEntity',
        },
      ],
    },
    signerEmployee: {
      nullable: true,
      allOf: [
        {
          $ref: '#/components/schemas/EmployeeBaseEntity',
        },
      ],
    },
    signerEmployeeList: {
      nullable: true,
      type: 'array',
      items: {
        $ref: '#/components/schemas/EmployeeBaseEntity',
      },
    },
  },
  required: [
    'id',
    'fieldGroup',
    'order',
    'signed',
    'signedDocLink',
    'signerType',
    'signingEmployee',
    'signerPosition',
    'signerDepartment',
    'signerEmployee',
    'signerEmployeeList',
  ],
} as const;

export const FormInstanceEntitySchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
      nullable: true,
    },
    formDocLink: {
      type: 'string',
    },
    completed: {
      type: 'boolean',
    },
    markedCompleted: {
      type: 'boolean',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    updatedAt: {
      format: 'date-time',
      type: 'string',
    },
    completedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    markedCompletedAt: {
      format: 'date-time',
      type: 'string',
      nullable: true,
    },
    originator: {
      $ref: '#/components/schemas/EmployeeBaseEntity',
    },
    formTemplate: {
      $ref: '#/components/schemas/FormTemplateBaseEntity',
    },
    assignedGroups: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AssignedGroupEntityHydrated',
      },
    },
    originatorId: {
      type: 'string',
    },
    formTemplateId: {
      type: 'string',
    },
  },
  required: [
    'id',
    'name',
    'description',
    'formDocLink',
    'completed',
    'markedCompleted',
    'createdAt',
    'updatedAt',
    'originator',
    'formTemplate',
    'assignedGroups',
    'originatorId',
    'formTemplateId',
  ],
} as const;

export const FormInstanceFindAllResponseSchema = {
  type: 'object',
  properties: {
    count: {
      type: 'number',
    },
    formInstances: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/FormInstanceEntity',
      },
    },
  },
  required: ['count', 'formInstances'],
} as const;

export const UpdateFormInstanceDtoSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    assignedGroups: {
      minItems: 1,
      type: 'array',
      items: {
        $ref: '#/components/schemas/CreateAssignedGroupDto',
      },
    },
    formDocLink: {
      type: 'string',
    },
  },
} as const;

export const SignFormInstanceDtoSchema = {
  type: 'object',
  properties: {
    file: {
      type: 'string',
      format: 'binary',
    },
    assignedGroupId: {
      type: 'string',
    },
  },
  required: ['file', 'assignedGroupId'],
} as const;
