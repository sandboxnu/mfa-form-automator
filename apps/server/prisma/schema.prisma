generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Department {
  id             String          @id @default(uuid()) @db.Uuid
  name           String          @unique @db.VarChar(255)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  assignedGroups AssignedGroup[]
  positions      Position[]
}

model Position {
  id             String          @id @default(uuid()) @db.Uuid
  name           String          @db.VarChar(255)
  single         Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  departmentId   String          @db.Uuid
  assignedGroups AssignedGroup[]
  employees      Employee[]
  department     Department      @relation(fields: [departmentId], references: [id])

  @@unique([name, departmentId])
}

model Employee {
  id                               String          @id @default(uuid()) @db.Uuid
  firstName                        String          @db.VarChar(255)
  lastName                         String          @db.VarChar(255)
  email                            String          @unique @db.VarChar(255)
  pswdHash                         String?         @db.VarChar(255)
  createdAt                        DateTime        @default(now())
  updatedAt                        DateTime        @updatedAt
  positionId                       String?         @db.Uuid
  refreshToken                     String?
  signatureLink                    String?         @db.VarChar(255)
  scope                            EmployeeScope   @default(BASE_USER)
  signerEmployeeAssignedGroups     AssignedGroup[] @relation("signerEmployee")
  signingEmployeeAssignedGroup     AssignedGroup[] @relation("signingEmployee")
  position                         Position?       @relation(fields: [positionId], references: [id])
  originatedForms                  FormInstance[]
  signerEmployeeListAssignedGroups AssignedGroup[] @relation("signerEmployeeList")
}

model FormTemplate {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @db.VarChar(255)
  formDocLink   String         @db.VarChar(255)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  fieldGroups   FieldGroup[]
  formInstances FormInstance[]
}

model FieldGroup {
  id             String          @id @default(uuid()) @db.Uuid
  name           String          @db.VarChar(255)
  order          Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  formTemplateId String          @db.Uuid
  assignedGroups AssignedGroup[]
  formTemplate   FormTemplate    @relation(fields: [formTemplateId], references: [id])
  templateBoxes  TemplateBox[]
}

model TemplateBox {
  id           String                @id @default(uuid()) @db.Uuid
  type         SignatureBoxFieldType
  x_coordinate Int
  y_coordinate Int
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  fieldGroupId String                @db.Uuid
  InstanceBox  InstanceBox[]
  fieldGroup   FieldGroup            @relation(fields: [fieldGroupId], references: [id])
}

model FormInstance {
  id                String          @id @default(uuid()) @db.Uuid
  name              String          @db.VarChar(255)
  formDocLink       String          @db.VarChar(255)
  completed         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  originatorId      String          @db.Uuid
  formTemplateId    String          @db.Uuid
  completedAt       DateTime?
  markedCompleted   Boolean         @default(false)
  markedCompletedAt DateTime?
  assignedGroups    AssignedGroup[]
  formTemplate      FormTemplate    @relation(fields: [formTemplateId], references: [id])
  originator        Employee        @relation(fields: [originatorId], references: [id])
}

model AssignedGroup {
  id                 String        @id @default(uuid()) @db.Uuid
  order              Int
  signed             Boolean       @default(false)
  signedDocLink      String?       @db.VarChar(255)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  signerPositionId   String?       @db.Uuid
  signerDepartmentId String?       @db.Uuid
  signerEmployeeId   String?       @db.Uuid
  signingEmployeeId  String?       @db.Uuid
  signerType         SignerType
  formInstanceId     String        @db.Uuid
  fieldGroupId       String        @db.Uuid
  fieldGroup         FieldGroup    @relation(fields: [fieldGroupId], references: [id])
  formInstance       FormInstance  @relation(fields: [formInstanceId], references: [id])
  signerDepartment   Department?   @relation(fields: [signerDepartmentId], references: [id])
  signerEmployee     Employee?     @relation("signerEmployee", fields: [signerEmployeeId], references: [id])
  signerPosition     Position?     @relation(fields: [signerPositionId], references: [id])
  signingEmployee    Employee?     @relation("signingEmployee", fields: [signingEmployeeId], references: [id])
  instanceBoxes      InstanceBox[]
  signerEmployeeList Employee[]    @relation("signerEmployeeList")
}

model InstanceBox {
  id              String        @id @default(uuid()) @db.Uuid
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  assignedGroupId String        @db.Uuid
  templateBoxId   String        @db.Uuid
  assignedGroup   AssignedGroup @relation(fields: [assignedGroupId], references: [id])
  templateBox     TemplateBox   @relation(fields: [templateBoxId], references: [id])
}

enum SignerType {
  POSITION
  DEPARTMENT
  USER
  USER_LIST
}

enum SignatureBoxFieldType {
  SIGNATURE
  CHECKBOX
  TEXT_FIELD
}

enum EmployeeScope {
  BASE_USER
  ADMIN
}
